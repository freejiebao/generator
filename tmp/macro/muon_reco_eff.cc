// ref: https://twiki.cern.ch/twiki/bin/viewauth/CMS/MuonLegacy2016#RECO_efficiency_AN1
#include "LatinoAnalysis/MultiDraw/interface/FunctionLibrary.h"
#include "LatinoAnalysis/MultiDraw/interface/TTreeFunction.h"

#include <vector>

#include "Math/GenVector/LorentzVector.h"
#include "Math/GenVector/PtEtaPhiM4D.h"
#include "Math/Vector4D.h"

#include <iostream>

class Mu_RecoSF : public multidraw::TTreeFunction {
public:
    Mu_RecoSF(char const* yr,char const* var, int nl, char const* cate);

    char const* getName() const override {
        return "Mu_RecoSF";
    }
    TTreeFunction* clone() const override {
        return new Mu_RecoSF(_year.c_str(),_variation.c_str(),_nlep,_category.c_str());
    }

    unsigned getNdata() override {
        return 1;
    }
    double evaluate(unsigned) override;

protected:
    void bindTree_(multidraw::FunctionLibrary&) override;

    UIntValueReader*  nLepton;
    IntArrayReader*   Lepton_pdgId;
    FloatArrayReader* Lepton_pt;
    FloatArrayReader* Lepton_eta;
    FloatArrayReader* Lepton_phi;
    DoubleArrayReader* Lepton_newpt;
    //FloatArrayReader* Lepton_tightMuon_cut_Tight_HWWW_IdIsoSF;
    //FloatArrayReader* Lepton_tightMuon_cut_Tight_HWWW_TotSF;
    //FloatArrayReader* Lepton_tightMuon_cut_Tight_HWWW_TotSF_Up;
    //FloatArrayReader* Lepton_tightMuon_cut_Tight_HWWW_TotSF_Down;
    std::string _year{};
    std::string _variation{};
    int _nlep;
    std::string _category{};
};

Mu_RecoSF::Mu_RecoSF(char const* yr,char const* var,int nl, char const* cate):
    TTreeFunction(),
    _year{yr},
    _variation{var},
    _nlep{nl},
    _category{cate}{
}

double
Mu_RecoSF::evaluate(unsigned) {
    unsigned nL{*nLepton->Get()};
    if (nL < _nlep)
        return 0.;
    //double tmp_sf=1;
    //double tmp_sf_up=1;
    //double tmp_sf_down=1;
    //if (Lepton_pt->At(0)<=200){
    //    for (int i=0; i<_nlep;i++){
    //        tmp_sf *= Lepton_tightMuon_cut_Tight_HWWW_IdIsoSF->At(i);
    //        tmp_sf_up *= (Lepton_tightMuon_cut_Tight_HWWW_TotSF_Up->At(i)/Lepton_tightMuon_cut_Tight_HWWW_TotSF->At(i));
    //        tmp_sf_down *= (Lepton_tightMuon_cut_Tight_HWWW_TotSF_Down->At(i)/Lepton_tightMuon_cut_Tight_HWWW_TotSF->At(i));
    //    }
    //    // _variation: NOM, UP, DOWN
    //    if(_variation=="NOM"){
    //        return tmp_sf;
    //    }else if(_variation=="UP"){
    //        return tmp_sf_up;
    //    }else{
    //        return tmp_sf_down;
    //    }
    //}
    if (Lepton_pt->At(0)<=200){ return 1;}

    // reco
    std::vector<double> recosf_loweta =     {0.9943,0.9948,0.9950,0.994,0.9914,0.993,0.991,1.0};
    std::vector<double> recosf_err_loweta = {0.0007,0.0007,0.0009,0.001,0.0009,0.002,0.004,0.1};
    std::vector<double> recosf_higheta =    {1.,0.993,0.990,0.988,0.981,0.983,0.978,0.98};
    std::vector<double> recosf_err_higheta ={0.,0.001,0.001,0.001,0.002,0.003,0.006,0.03};
    if(_year=="2017"){
        recosf_loweta =     {0.9938,0.9950,0.996,0.996,0.994,1.003,0.987,0.9};
        recosf_err_loweta = {0.0006,0.0007,0.001,0.001,0.001,0.006,0.003,0.1};
        recosf_higheta =    {1.,0.993,0.989,0.986,0.989,0.983,0.986,1.01};
        recosf_err_higheta ={0.,0.001,0.001,0.001,0.001,0.003,0.006,0.01};
    }
    else if (_year=="2016"){
        recosf_loweta =     {0.9914,0.9936,0.993,0.993,0.990,0.990,0.989,0.8};
        recosf_err_loweta = {0.0008,0.0009,0.001,0.002,0.004,0.003,0.004,0.3};
        recosf_higheta =    {1.,0.993,0.991,0.985,0.981,0.979,0.978,0.9};
        recosf_err_higheta ={0.,0.001,0.001,0.001,0.002,0.004,0.005,0.2};
    }

    // id
    double idsf_etabin0=0.989867; // pt: >=120, >=200
    double idsf_err_etabin0=0.005886;
    double idsf_etabin1=0.961165; // pt: >=120, >=200
    double idsf_err_etabin1=0.010920;
    double idsf_etabin2=0.991457; // pt: >=120, >=200
    double idsf_err_etabin2=0.007223;
    if(_year=="2017"){
        idsf_etabin0=0.989867; // pt: >=120, >=200
        idsf_err_etabin0=0.005886;
        idsf_etabin1=0.961165; // pt: >=120, >=200
        idsf_err_etabin1=0.010920;
        idsf_etabin2=0.991457; // pt: >=120, >=200
        idsf_err_etabin2=0.007223;
    }
    else if (_year=="2016"){
        idsf_etabin0=0.989867; // pt: >=120, >=200
        idsf_err_etabin0=0.005886;
        idsf_etabin1=0.961165; // pt: >=120, >=200
        idsf_err_etabin1=0.010920;
        idsf_etabin2=0.991457; // pt: >=120, >=200
        idsf_err_etabin2=0.007223;
    }

    // tightHWW
    float id_tightHWW_sf_2018[8][14]= {
            {0.9686, 0.9806, 0.9996, 0.9801, 0.9975, 0.9895, 1.0053, 1.0053, 0.9446, 0.9908, 0.9763, 0.9984, 0.9967, 0.9726},
            {0.9683, 0.9817, 0.9974, 0.9836, 0.9951, 0.9513, 0.9925, 0.9925, 0.9678, 0.9901, 0.9849, 0.9945, 0.9888, 0.9810},
            {0.9681, 0.9826, 0.9979, 0.9874, 0.9963, 0.9670, 0.9936, 0.9986, 0.9725, 0.9921, 0.9835, 0.9967, 0.9899, 0.9786},
            {0.9679, 0.9821, 0.9977, 0.9858, 0.9960, 0.9779, 0.9943, 0.9918, 0.9795, 0.9941, 0.9804, 0.9964, 0.9890, 0.9742},
            {0.9688, 0.9789, 0.9970, 0.9848, 0.9956, 0.9778, 0.9933, 0.9946, 0.9740, 0.9930, 0.9814, 0.9957, 0.9885, 0.9749},
            {0.9672, 0.9802, 0.9967, 0.9856, 0.9964, 0.9752, 0.9950, 0.9952, 0.9743, 0.9943, 0.9821, 0.9958, 0.9875, 0.9761},
            {0.9652, 0.9756, 0.9959, 0.9835, 0.9957, 0.9725, 0.9919, 0.9946, 0.9760, 0.9931, 0.9803, 0.9945, 0.9853, 0.9702},
            {0.9500, 0.9750, 0.9944, 0.9839, 0.9976, 0.9688, 0.9984, 0.9890, 0.9460, 0.9925, 0.9778, 0.9954, 0.9780, 0.9881},
    };
    float id_tightHWW_err_2018[8][14]= {
            {0.009, 0.007, 0.008, 0.009, 0.010, 0.040, 0.020, 0.020, 0.040, 0.008, 0.011, 0.010, 0.007, 0.010},
            {0.007, 0.006, 0.007, 0.006, 0.006, 0.016, 0.007, 0.007, 0.017, 0.006, 0.006, 0.006, 0.006, 0.007},
            {0.006, 0.005, 0.006, 0.008, 0.008, 0.011, 0.008, 0.008, 0.011, 0.008, 0.006, 0.007, 0.005, 0.006},
            {0.005, 0.007, 0.005, 0.005, 0.006, 0.007, 0.006, 0.005, 0.008, 0.005, 0.005, 0.005, 0.007, 0.005},
            {0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005},
            {0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.008, 0.005, 0.005, 0.005},
            {0.007, 0.005, 0.005, 0.005, 0.005, 0.008, 0.005, 0.005, 0.009, 0.005, 0.006, 0.005, 0.005, 0.007},
            {0.040, 0.010, 0.007, 0.010, 0.007, 0.030, 0.010, 0.009, 0.040, 0.006, 0.011, 0.007, 0.011, 0.030},
    };
    float id_tightHWW_sf_2017[8][14]= {
            {0.9880, 0.9827, 0.9981, 0.9961, 1.0018, 1.0099, 1.0129, 1.0129, 1.0193, 0.9893, 0.9767, 0.9978, 0.9901, 0.9852},
            {0.9735, 0.9831, 0.9955, 0.9849, 0.9995, 0.9582, 0.9932, 0.9932, 0.9400, 0.9891, 0.9813, 0.9970, 0.9899, 0.9807},
            {0.9737, 0.9839, 0.9976, 0.9863, 0.9940, 0.9561, 0.9936, 0.9963, 0.9757, 0.9915, 0.9800, 0.9975, 0.9892, 0.9771},
            {0.9741, 0.9819, 0.9975, 0.9852, 0.9931, 0.9580, 0.9936, 0.9952, 0.9619, 0.9914, 0.9790, 0.9979, 0.9905, 0.9826},
            {0.9719, 0.9794, 0.9973, 0.9842, 0.9935, 0.9570, 0.9932, 0.9942, 0.9635, 0.9921, 0.9781, 0.9972, 0.9900, 0.9815},
            {0.9709, 0.9815, 0.9979, 0.9849, 0.9941, 0.9556, 0.9945, 0.9953, 0.9636, 0.9924, 0.9790, 0.9966, 0.9896, 0.9800},
            {0.9622, 0.9779, 0.9959, 0.9842, 0.9935, 0.9525, 0.9938, 0.9944, 0.9563, 0.9918, 0.9747, 0.9967, 0.9868, 0.9887},
            {0.9649, 0.9732, 0.9899, 0.9851, 0.9884, 0.9645, 1.0060, 0.9953, 0.9831, 0.9872, 0.9738, 0.9981, 0.9868, 0.9635},
    };
    float id_tightHWW_err_2017[8][14]= {
            {0.010, 0.007, 0.008, 0.012, 0.010, 0.05, 0.016, 0.016, 0.06, 0.011, 0.012, 0.008, 0.007, 0.009},
            {0.008, 0.006, 0.006, 0.008, 0.005, 0.02, 0.007, 0.007, 0.02, 0.007, 0.007, 0.006, 0.006, 0.007},
            {0.006, 0.005, 0.006, 0.007, 0.008, 0.012, 0.007, 0.008, 0.014, 0.008, 0.008, 0.007, 0.005, 0.007},
            {0.006, 0.006, 0.005, 0.005, 0.005, 0.009, 0.006, 0.006, 0.008, 0.005, 0.005, 0.005, 0.007, 0.006},
            {0.006, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005},
            {0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.012, 0.005, 0.008, 0.005, 0.005, 0.005},
            {0.008, 0.006, 0.011, 0.007, 0.005, 0.010, 0.006, 0.006, 0.011, 0.005, 0.006, 0.005, 0.006, 0.008},
            {0.05, 0.014, 0.006, 0.012, 0.007, 0.04, 0.014, 0.011, 0.05, 0.006, 0.014, 0.009, 0.013, 0.03},
    };
    float id_tightHWW_sf_2016[8][14]= {
            {0.9995, 1.0016, 0.9985, 0.9907, 0.9844, 1.0183, 1.0089, 1.0089, 1.0265, 0.9862, 0.9808, 0.9882, 0.9927, 0.9972},
            {0.9805, 0.9870, 0.9950, 0.9867, 0.9935, 0.9686, 0.9927, 0.9927, 0.9771, 0.9924, 0.9826, 0.9986, 0.9912, 0.9797},
            {0.9756, 0.9829, 0.9949, 0.9823, 0.9914, 0.9712, 0.9906, 0.9910, 0.9590, 0.9917, 0.9776, 0.9927, 0.9873, 0.9822},
            {0.9793, 0.9850, 0.9942, 0.9794, 0.9912, 0.9659, 0.9899, 0.9886, 0.9610, 0.9899, 0.9784, 0.9932, 0.9874, 0.9805},
            {0.9773, 0.9828, 0.9947, 0.9782, 0.9891, 0.9685, 0.9903, 0.9883, 0.9614, 0.9887, 0.9770, 0.9940, 0.9876, 0.9828},
            {0.9766, 0.9851, 0.9957, 0.9796, 0.9908, 0.9713, 0.9911, 0.9894, 0.9638, 0.9898, 0.9786, 0.9945, 0.9871, 0.9774},
            {0.9618, 0.9794, 0.9963, 0.9773, 0.9917, 0.9597, 0.9914, 0.9886, 0.9655, 0.9883, 0.9764, 0.9948, 0.9858, 0.9796},
            {0.9803, 0.9743, 0.9831, 0.9740, 0.9949, 0.9634, 0.9954, 0.9814, 0.9482, 0.9870, 0.9732, 0.9962, 0.9782, 0.9895},
    };
    float id_tightHWW_err_2016[8][14]= {
            {0.015, 0.008, 0.010, 0.011, 0.009, 0.050, 0.020, 0.020, 0.060, 0.010, 0.009, 0.010, 0.008, 0.013},
            {0.013, 0.006, 0.007, 0.007, 0.006, 0.019, 0.007, 0.007, 0.020, 0.006, 0.007, 0.006, 0.006, 0.009},
            {0.010, 0.005, 0.008, 0.006, 0.010, 0.012, 0.009, 0.009, 0.013, 0.010, 0.009, 0.006, 0.005, 0.008},
            {0.008, 0.005, 0.006, 0.006, 0.006, 0.008, 0.006, 0.006, 0.008, 0.006, 0.006, 0.006, 0.005, 0.007},
            {0.008, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.009},
            {0.007, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.005, 0.006, 0.006, 0.005, 0.005, 0.005, 0.008},
            {0.011, 0.006, 0.005, 0.005, 0.011, 0.010, 0.006, 0.006, 0.016, 0.005, 0.006, 0.005, 0.006, 0.012},
            {0.04, 0.013, 0.006, 0.011, 0.008, 0.05, 0.011, 0.011, 0.05, 0.006, 0.011, 0.009, 0.014, 0.04},
    };
    //iso
    float iso_sf_2018[8][14]= {
            {1.1308, 1.0907, 1.0156, 0.9654, 0.9618, 0.9595, 1.0022, 1.0022, 0.9491, 0.9796, 0.9731, 1.0091, 1.0746, 1.1053},
            {1.0856, 1.0669, 1.0211, 0.9886, 0.9744, 0.9716, 0.9803, 0.9803, 0.9866, 0.9904, 0.9951, 1.0140, 1.0501, 1.0877},
            {1.0610, 1.0480, 1.0082, 0.9898, 0.9834, 0.9838, 0.9855, 0.9863, 0.9790, 0.9969, 0.9851, 1.0074, 1.0407, 1.0674},
            {1.0394, 1.0303, 1.0082, 0.9887, 0.9880, 0.9886, 0.9853, 0.9889, 0.9874, 0.9915, 0.9931, 1.0064, 1.0307, 1.0463},
            {1.0239, 1.0184, 1.0037, 0.9920, 0.9926, 0.9897, 0.9908, 0.9917, 0.9930, 0.9971, 0.9957, 1.0022, 1.0159, 1.0259},
            {1.0121, 1.0093, 1.0021, 0.9969, 0.9967, 0.9958, 0.9957, 0.9962, 0.9966, 0.9982, 0.9978, 1.0013, 1.0079, 1.0113},
            {1.0056, 1.0040, 0.9996, 0.9992, 0.9983, 0.9962, 0.9971, 0.9978, 0.9991, 1.0003, 0.9988, 1.0011, 1.0043, 1.0044},
            {0.9954, 1.0020, 0.9995, 1.0034, 0.9993, 0.9977, 1.0057, 0.9999, 1.0092, 1.0019, 1.0011, 1.0057, 1.0049, 0.9944},
    };
    float iso_err_2018[8][14]= {
            {0.017,0.014,0.018,0.02,0.03,0.09,0.05,0.05,0.08,0.02,0.03,0.019,0.015,0.016},
            {0.009,0.008,0.010,0.011,0.011,0.03,0.015,0.015,0.03,0.011,0.012,0.010,0.008,0.010},
            {0.006,0.004,0.005,0.006,0.006,0.006,0.013,0.009,0.009,0.013,0.006,0.006,0.004,0.006},
            {0.003,0.003,0.003,0.003,0.003,0.006,0.004,0.004,0.006,0.003,0.003,0.003,0.002,0.003},
            {0.0011,0.0010,0.0010,0.0009,0.0008,0.0018,0.0012,0.0011,0.0019,0.0008,0.0010,0.0010,0.0009,0.0012},
            {0.0007,0.0004,0.0005,0.0004,0.0004,0.0015,0.0015,0.0006,0.0005,0.0004,0.0004,0.0004,0.0004,0.0007},
            {0.002,0.0014,0.0012,0.0012,0.013,0.002,0.0016,0.0016,0.003,0.0010,0.0012,0.0013,0.0014,0.0019},
            {0.006,0.006,0.005,0.004,0.003,0.007,0.007,0.005,0.008,0.003,0.004,0.005,0.005,0.008},
    };
    float iso_sf_2017[8][14]= {
            {0.9808, 1.0062, 0.9758, 0.9868, 0.9564, 0.9705, 0.92208, 0.92208, 0.9790, 0.9952, 0.9885, 0.9992, 0.9919, 0.9825},
            {0.9863, 1.0046, 0.9902, 0.9974, 0.9901, 0.9939, 0.9806, 0.9806, 1.0073, 1.0037, 0.9744, 0.9747, 0.9902, 0.9838},
            {0.9876, 0.9903, 0.9826, 0.9883, 0.9965, 0.9850, 0.9893, 0.9869, 0.9873, 0.9896, 1.0004, 0.9862, 0.9993, 0.9915},
            {0.9941, 0.9956, 0.9903, 0.9868, 0.9944, 0.9907, 0.9988, 0.9911, 0.9964, 0.9960, 0.9919, 0.9912, 0.9972, 0.9914},
            {0.9964, 0.9980, 0.9937, 0.9922, 0.9958, 0.9925, 0.9956, 0.9959, 0.9961, 0.9976, 0.9963, 0.9930, 0.9962, 0.9944},
            {0.9991, 0.9990, 0.9965, 0.9964, 0.9966, 0.9967, 0.9977, 0.9992, 0.9989, 0.9990, 0.9978, 0.9965, 0.9986, 0.9981},
            {0.9962, 1.0001, 0.9990, 1.0009, 0.9971, 1.0016, 0.9985, 0.9992, 1.0002, 1.0011, 0.9988, 0.9993, 0.9995, 1.0008},
            {0.9947, 1.0028, 1.0001, 1.0056, 1.0006, 0.9972, 0.9958, 1.0000, 0.9978, 0.9996, 0.9980, 1.0019, 1.0000, 0.9977},
    };
    float iso_err_2017[8][14]= {
            {0.017, 0.017, 0.02, 0.03, 0.03, 0.06, 0.06, 0.06, 0.06, 0.03, 0.03, 0.02, 0.015, 0.017},
            {0.010, 0.010, 0.015, 0.017, 0.016, 0.04, 0.02, 0.02, 0.04, 0.016, 0.016, 0.013, 0.009, 0.011},
            {0.008, 0.007, 0.009, 0.010, 0.009, 0.018, 0.012, 0.018, 0.009, 0.009, 0.010, 0.009, 0.007, 0.008},
            {0.006, 0.006, 0.006, 0.007, 0.006, 0.010, 0.007, 0.010, 0.006, 0.006, 0.007, 0.006, 0.006, 0.006},
            {0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005},
            {0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.005},
            {0.005, 0.005, 0.005, 0.005, 0.005, 0.006, 0.005, 0.006, 0.005, 0.005, 0.005, 0.005, 0.005, 0.006},
            {0.008, 0.007, 0.007, 0.008, 0.006, 0.009, 0.007, 0.008, 0.006, 0.006, 0.006, 0.008, 0.009, 0.010},
    };
    float iso_sf_2016[8][14]= {
            {0.9650, 0.9640, 0.9596, 0.9719, 0.9620, 0.9507, 0.9648, 0.9648, 0.9745, 0.9668, 0.9605, 0.9679, 0.9602, 0.9492},
            {0.9670, 0.9780, 0.9753, 0.9660, 0.9737, 0.9945, 0.9652, 0.9652, 0.9830, 0.9842, 0.9880, 0.9648, 0.9702, 0.9610},
            {0.9789, 0.9889, 0.9832, 0.9905, 0.9795, 0.9784, 0.9691, 0.9925, 0.9830, 0.9915, 0.9854, 0.9856, 0.9821, 0.9797},
            {0.9905, 0.9927, 0.9921, 0.9911, 0.9934, 0.9928, 0.9886, 0.9961, 0.9930, 0.9988, 1.0009, 0.9901, 0.9910, 0.9871},
            {0.9971, 0.9973, 0.9951, 0.9947, 0.9939, 0.9956, 0.9930, 0.9936, 0.9943, 0.9979, 0.9976, 0.9932, 0.9954, 0.9927},
            {0.9990, 0.9975, 0.9972, 0.9971, 0.9958, 0.9956, 0.9955, 0.9955, 0.9973, 0.9979, 0.9976, 0.9964, 0.9971, 0.9971},
            {0.9999, 0.9990, 0.9980, 0.9996, 0.9986, 0.9969, 0.9989, 0.9980, 0.9971, 1.0004, 0.9986, 1.0001, 0.9980, 1.0038},
            {0.9966, 1.0003, 1.0017, 1.0018, 1.0033, 0.9980, 1.0051, 0.9931, 1.0020, 1.0085, 0.9994, 0.9967, 1.0066, 1.0048},
    };
    float iso_err_2016[8][14]= {
            {0.017, 0.014, 0.019, 0.02,0.03, 0.06, 0.06, 0.06, 0.06, 0.03, 0.02, 0.018, 0.014, 0.017},
            {0.009, 0.008, 0.010, 0.012, 0.012, 0.040, 0.018, 0.018, 0.040, 0.013, 0.013, 0.010, 0.007, 0.010},
            {0.006, 0.004, 0.005, 0.007, 0.006, 0.015, 0.010, 0.011, 0.016, 0.007, 0.007, 0.006, 0.004, 0.006},
            {0.004, 0.002, 0.003, 0.004, 0.003, 0.008, 0.005, 0.005, 0.008, 0.003, 0.004, 0.003, 0.003, 0.004},
            {0.0014, 0.0009, 0.0011, 0.0012, 0.0011, 0.002, 0.0017,0.0018,0.002,0.0010,0.0013,0.0011,0.0010,0.0013},
            {0.0007,0.0004,0.0005,0.0005,0.0005,0.0011,0.0008,0.0008,0.0009,0.0005,0.0005,0.0005,0.0004,0.0007},
            {0.002,0.0011,0.0013,0.0013,0.0012,0.003,0.002,0.002,0.003,0.0012,0.0013,0.0013,0.0011,0.002},
            {0.007,0.006,0.004,0.004,0.005,0.004,0.007,0.003,0.008,0.005,0.005,0.005,0.007,0.010},
    };

    std::vector<double> reco_sf(_nlep,1);
    std::vector<double> reco_sf_err(_nlep,0);
    std::vector<double> id_sf(_nlep,1);
    std::vector<double> id_sf_err(_nlep,0);
    std::vector<double> iso_sf(_nlep,1);
    std::vector<double> iso_sf_err(_nlep,0);
    std::vector<double> old_id_sf(_nlep,1);
    std::vector<double> old_id_sf_err(_nlep,0);
    std::vector<double> sfs(_nlep,1);
    std::vector<double> sfs_err(_nlep,0);
    ROOT::Math::PtEtaPhiMVector part;
    double p;
    double the_pt;
    double the_eta;
    int p_pt_idx=0;
    int eta_idx=0;
    for (int i=0; i<_nlep; i++){
        the_pt = Lepton_newpt->At(i);
        the_eta = Lepton_eta->At(i);
        // reco
        part = ROOT::Math::PtEtaPhiMVector(the_pt,the_eta,Lepton_phi->At(i),0.1056583745);
        p=part.P();

        if (p<200){
            p_pt_idx=-1;
        }else if(p>=200 && p<300){
            p_pt_idx=3;
        }else if(p>=300 && p<400){
            p_pt_idx=4;
        }else if(p>=400 && p<600){
            p_pt_idx=5;
        }else if(p>=600 && p<1500){
            p_pt_idx=6;
        }else{
            p_pt_idx=7;
        }
        if (the_pt>=200){
            if (p_pt_idx>0){
                if (abs(the_eta)<1.6){
                    reco_sf[i]=recosf_loweta[p_pt_idx];
                    reco_sf_err[i]=recosf_err_loweta[p_pt_idx];
                }else{
                    reco_sf[i]=recosf_higheta[p_pt_idx];
                    reco_sf_err[i]=recosf_err_higheta[p_pt_idx];
                }
            }else{
                reco_sf[i]=1;
                reco_sf_err[i]=0;
            }
        }else{
            reco_sf[i]=1;
            reco_sf_err[i]=0;
        }
        // id
        if (the_pt<200){
            id_sf[i] = 1;
            id_sf_err[i] = 0;
        }else{
            if (abs(the_eta)<0.9){
                id_sf[i] = idsf_etabin0;
                id_sf_err[i] = idsf_err_etabin0;
            }else if (abs(the_eta)>=0.9 && abs(the_eta)<1.2){
                id_sf[i] = idsf_etabin1;
                id_sf_err[i] = idsf_err_etabin1;
            }else{
                id_sf[i] = idsf_etabin2;
                id_sf_err[i] = idsf_err_etabin2;
            }
        }
        //old id
        //pt
        if (the_pt<15){
            p_pt_idx=0;
        }else if(the_pt>=15 && the_pt<20){
            p_pt_idx=1;
        }else if(the_pt>=20 && the_pt<25){
            p_pt_idx=2;
        }else if(the_pt>=25 && the_pt<30){
            p_pt_idx=3;
        }else if(the_pt>=30 && the_pt<40){
            p_pt_idx=4;
        }else if(the_pt>=40 && the_pt<60){
            p_pt_idx=5;
        }else if(the_pt>=60 && the_pt<100){
            p_pt_idx=6;
        }else{
            p_pt_idx=7;
        }
        //eta
        if (the_eta<-2.1){
            eta_idx=0;
        }else if(the_eta>=-2.1 && the_pt<-1.6){
            eta_idx=1;
        }else if(the_eta>=-1.6 && the_pt<-1.2){
            eta_idx=2;
        }else if(the_eta>=-1.2 && the_pt<-0.8){
            eta_idx=3;
        }else if(the_eta>=-0.8 && the_pt<-0.3){
            eta_idx=4;
        }else if(the_eta>=-0.3 && the_pt<-0.2){
            eta_idx=5;
        }else if(the_eta>=-0.2 && the_pt<0.0){
            eta_idx=6;
        }else if(the_eta>=0.0 && the_pt<0.2){
            eta_idx=7;
        }else if(the_eta>=0.2 && the_pt<0.3){
            eta_idx=8;
        }else if(the_eta>=0.3 && the_pt<0.8){
            eta_idx=9;
        }else if(the_eta>=0.8 && the_pt<1.2){
            eta_idx=10;
        }else if(the_eta>=1.2 && the_pt<1.6){
            eta_idx=11;
        }else if(the_eta>=1.6 && the_pt<2.1){
            eta_idx=12;
        }else{
            eta_idx=13;
        }
        if (the_pt<200){
            if (_year=="2018"){
                old_id_sf[i]=id_tightHWW_sf_2018[p_pt_idx][eta_idx];
                old_id_sf_err[i]=id_tightHWW_err_2018[p_pt_idx][eta_idx];
            }else if(_year=="2017"){
                old_id_sf[i]=id_tightHWW_sf_2017[p_pt_idx][eta_idx];
                old_id_sf_err[i]=id_tightHWW_err_2017[p_pt_idx][eta_idx];
            }else{
                old_id_sf[i]=id_tightHWW_sf_2016[p_pt_idx][eta_idx];
                old_id_sf_err[i]=id_tightHWW_err_2016[p_pt_idx][eta_idx];
            }
        }else{
            old_id_sf[i]=1;
            old_id_sf_err[i]=0;
        }
        // iso
        if (_year=="2018"){
            iso_sf[i]=iso_sf_2018[p_pt_idx][eta_idx];
            iso_sf_err[i]=iso_err_2018[p_pt_idx][eta_idx];
        }else if(_year=="2017"){
            iso_sf[i]=iso_sf_2017[p_pt_idx][eta_idx];
            iso_sf_err[i]=iso_err_2017[p_pt_idx][eta_idx];
        }else{
            iso_sf[i] = iso_sf_2016[p_pt_idx][eta_idx];
            iso_sf_err[i] = iso_err_2016[p_pt_idx][eta_idx];
        }
        // sf and err for each lepton
        if (the_pt<200){
            sfs[i] = old_id_sf[i]*iso_sf[i];
            sfs_err[i] = std::sqrt(old_id_sf_err[i]*old_id_sf_err[i]+iso_sf_err[i]*iso_sf_err[i]);
        }else{
            sfs[i] = reco_sf[i]*id_sf[i]*iso_sf[i];
            sfs_err[i] = std::sqrt(reco_sf_err[i]*reco_sf_err[i]+id_sf_err[i]*id_sf_err[i]+iso_sf_err[i]*iso_sf_err[i]);
        }
    }

    double the_sf=1;
    for(int i=0; i<_nlep;i++){
        if(_variation=="NOM"){
            the_sf *= sfs[i];
        }else if (_variation=="UP"){
            the_sf *= ((sfs[i]+sfs_err[i])/sfs[i]);
        }else{
            the_sf *= ((sfs[i]-sfs_err[i])/sfs[i]);
        }
    }
    return the_sf;
}

void Mu_RecoSF::bindTree_(multidraw::FunctionLibrary& _library) {
    _library.bindBranch(nLepton, "nLepton");
    _library.bindBranch(Lepton_pdgId, "Lepton_pdgId");
    _library.bindBranch(Lepton_pt, "Lepton_pt");
    _library.bindBranch(Lepton_eta, "Lepton_eta");
    _library.bindBranch(Lepton_phi, "Lepton_phi");
    if(_category=="NEWPT"){ // cate: NEWPT, RES, GE
        _library.bindBranch(Lepton_newpt, "Lepton_newpt");
    }else if(_category=="RES"){
        _library.bindBranch(Lepton_newpt, "Lepton_respt");
    }else{
        _library.bindBranch(Lepton_newpt, "Lepton_gept");
    }
    //_library.bindBranch(Lepton_tightMuon_cut_Tight_HWWW_IdIsoSF, "Lepton_tightMuon_cut_Tight_HWWW_IdIsoSF");
    //_library.bindBranch(Lepton_tightMuon_cut_Tight_HWWW_TotSF, "Lepton_tightMuon_cut_Tight_HWWW_TotSF");
    //_library.bindBranch(Lepton_tightMuon_cut_Tight_HWWW_TotSF_Up, "Lepton_tightMuon_cut_Tight_HWWW_TotSF_Up");
    //_library.bindBranch(Lepton_tightMuon_cut_Tight_HWWW_TotSF_Down, "Lepton_tightMuon_cut_Tight_HWWW_TotSF_Down");
}