#-*- Makefile -*-
## Choose compiler: gfortran,ifort (g77 not supported, F90 constructs in use!)
COMPILER=gfortran
FC=$(COMPILER)
## Choose PDF: native,lhapdf
## LHAPDF package has to be installed separately
PDF=lhapdf
#Choose Analysis: dummy, process specific
## default analysis may require FASTJET package, that has to be installed separately (see below)
#ANALYSIS=dummy
#ANALYSIS=top-reconstruction-2
ANALYSIS=blind
#ANALYSIS=denner-2
#ANALYSIS=top-ckmp
#ANALYSIS=single-top
## For static linking uncomment the following
#STATIC= -static
#

#Path to the OpenLoops installation
OLPATH=$(PWD)/../OpenLoopsStuff/OpenLoops
#Required OL libraries
OLLIBS=ppllllbb

LIBS+=-lz

OBJ=obj-$(COMPILER)
OBJDIR:=$(OBJ)

ifeq ("$(COMPILER)","gfortran")	
F77=gfortran -fno-automatic -ffixed-line-length-none -J$(OBJ) -I$(OBJ) -fbounds-check
## -fbounds-check sometimes causes a weird error due to non-lazy evaluation
## of boolean in gfortran.
#FFLAGS= -Wall -Wimplicit-interface -fbounds-check
## For floating point exception trapping  uncomment the following 
#FPE=-ffpe-trap=invalid,zero,overflow,underflow 
## gfortran 4.4.1 optimized with -O3 yields erroneous results
## Use -O2 to be on the safe side
OPT=-O2
## For debugging uncomment the following
#DEBUG= -ggdb -ffpe-trap=invalid,zero,overflow
ifdef DEBUG
OPT=-O0
#FPE=-ffpe-trap=invalid,zero,overflow
#,underflow
endif
endif

ifeq ("$(COMPILER)","ifort")
F77 = ifort -save  -extend_source  -module $(OBJ)
#CXX = g++
#LIBS = -limf
#FFLAGS =  -checkm
## For floating point exception trapping  uncomment the following 
#FPE = -fpe0
OPT = -O3 #-fast
## For debugging uncomment the following
#DEBUG= -debug -g
ifdef DEBUG
OPT=-O0 
FPE = -fpe0
endif
endif

PWD=$(shell pwd)
WDNAME=$(shell basename $(PWD))
VPATH= ./:../:$(OBJDIR):../OpenLoopsStuff/:./MCFM/src/Topdecay:/.MCFM/src/Inc

INCLUDE0=$(PWD)
INCLUDE1=$(shell dirname $(PWD))/include
INCLUDE2=$(PWD)/MCFM/src/Inc/
FF=$(F77) $(FFLAGS) $(FPE) $(OPT) $(DEBUG) -I$(INCLUDE0) -I$(INCLUDE1) -I$(INCLUDE2)

INCLUDE =$(wildcard ../include/*.h *.h include/*.h)

ifeq ("$(PDF)","lhapdf")
LHAPDF_CONFIG=lhapdf-config
PDFPACK=lhapdfif.o
LIBSLHAPDF= -Wl,-rpath,$(shell $(LHAPDF_CONFIG) --libdir)  -L$(shell $(LHAPDF_CONFIG) --libdir) -lLHAPDF
ifeq  ("$(STATIC)","-static") 
## If LHAPDF has been compiled with gfortran and you want to link it statically, you have to include
## libgfortran as well. The same holds for libstdc++. 
## One possible solution is to use fastjet, since $(shell $(FASTJET_CONFIG) --libs --plugins ) -lstdc++
## does perform this inclusion. The path has to be set by the user. 
# LIBGFORTRANPATH= #/usr/lib/gcc/x86_64-redhat-linux/4.1.2
# LIBSTDCPP=/lib64
LIBSLHAPDF+=  -L$(LIBGFORTRANPATH)  -lgfortranbegin -lgfortran -L$(LIBSTDCPP) -lstdc++
endif
LIBS+=$(LIBSLHAPDF)
else
PDFPACK=mlmpdfif.o hvqpdfpho.o
endif


ifeq ("$(ANALYSIS)","YOURPROCESS")
##To include Fastjet configuration uncomment the following lines. 
FASTJET_CONFIG=$(shell which fastjet-config)
LIBSFASTJET += $(shell $(FASTJET_CONFIG) --libs --plugins ) -lstdc++
FJCXXFLAGS+= $(shell $(FASTJET_CONFIG) --cxxflags)
PWHGANAL=pwhg_bookhist-multi.o pwhg_analysis.o
## Also add required Fastjet drivers to PWHGANAL (examples are reported)
#PWHGANAL+= fastjetsisconewrap.o fastjetktwrap.o fastjetCDFMidPointwrap.o fastjetD0RunIIConewrap.o fastjetfortran.o
#PWHGANAL+= fastjetsisconewrap.o fastjetktwrap.o fastjetfortran.o
PWHGANAL+=  fastjetfortran.o
else
PWHGANAL=pwhg_bookhist-new.o pwhg_analysis-dummy.o
endif


ifeq ("$(ANALYSIS)","top-reconstruction-2")
FASTJET_CONFIG=$(shell which fastjet-config)
LIBSFASTJET += $(shell $(FASTJET_CONFIG) --libs --plugins ) -lstdc++
FJCXXFLAGS+= $(shell $(FASTJET_CONFIG) --cxxflags)
PWHGANAL=pwhg_analysis-top-reconstruction-2.o pwhg_bookhist-multi.o multi_plot.o
PWHGANAL+= fastjetfortran.o
endif


ifeq ("$(ANALYSIS)","blind")
FASTJET_CONFIG=$(shell which fastjet-config)
LIBSFASTJET += $(shell $(FASTJET_CONFIG) --libs --plugins ) -lstdc++
FJCXXFLAGS+= $(shell $(FASTJET_CONFIG) --cxxflags)
PWHGANAL=pwhg_analysis-top-blind.o pwhg_bookhist-multi.o multi_plot.o
PWHGANAL+= fastjetfortran.o
endif


ifeq ("$(ANALYSIS)","denner-2")
FASTJET_CONFIG=$(shell which fastjet-config)
LIBSFASTJET += $(shell $(FASTJET_CONFIG) --libs --plugins ) -lstdc++
FJCXXFLAGS+= $(shell $(FASTJET_CONFIG) --cxxflags)
PWHGANAL=pwhg_analysis-top-denner-2.o pwhg_bookhist-multi.o
PWHGANAL+= fastjetfortran.o
endif

ifeq ("$(ANALYSIS)","top-ckmp")
FASTJET_CONFIG=$(shell which fastjet-config)
LIBSFASTJET += $(shell $(FASTJET_CONFIG) --libs --plugins ) -lstdc++
FJCXXFLAGS+= $(shell $(FASTJET_CONFIG) --cxxflags)
PWHGANAL=pwhg_analysis-top-ckmp.o pwhg_bookhist-multi.o
PWHGANAL+= fastjetfortran.o
endif

ifeq ("$(ANALYSIS)","single-top")
FASTJET_CONFIG=$(shell which fastjet-config)
LIBSFASTJET += $(shell $(FASTJET_CONFIG) --libs --plugins ) -lstdc++
FJCXXFLAGS+= $(shell $(FASTJET_CONFIG) --cxxflags)
PWHGANAL=pwhg_analysis-single-top.o pwhg_bookhist-multi.o multi_plot.o
PWHGANAL+= fastjetfortran.o
endif


%.o: %.f $(INCLUDE) | $(OBJDIR)
	$(FF) -c -o $(OBJ)/$@ $<

%.o: %.f90 $(INCLUDE) | $(OBJDIR)
	$(FF) -c -o $(OBJ)/$@ $<

%.o: %.c | $(OBJDIR)
	$(CC) $(DEBUG) -c -o $(OBJ)/$@ $^ 

%.o: %.cc | $(OBJDIR)
	$(CXX) $(DEBUG) -c -o $(OBJ)/$@ $^ $(FJCXXFLAGS)

USER=init_couplings.o init_processes.o Born_phsp.o Born.o virtual.o	\
     real.o Check_LesHouches.o $(PWHGANAL)


ifdef OLPATH
FF+= -I$(OLPATH)/lib_src/openloops/mod
LIBSOPENLOOPS= -Wl,-rpath=$(PWD)/$(OBJDIR) -L$(PWD)/$(OBJDIR) -lopenloops
USER+=openloops.o
endif



# PYTHIA 8

FJCXXFLAGS+=$(shell  pythia8-config --cxxflags)
#LIBPYTHIA8=$(shell pythia8-config --ldflags) -ldl -lstdc++ #-llhapdfdummy
LIBPYTHIA8= -L$(shell pythia8-config --libdir)  -L$(shell pythia8-config --libdir)/archive -lpythia8 -ldl -lstdc++ #-llhapdfdummy


PWHG=pwhg_main.o pwhg_init.o bbinit.o btilde.o lhefwrite.o		\
	LesHouches.o LesHouchesreg.o gen_Born_phsp.o find_regions.o	\
	fill_res_histories.o                                        	\
	test_Sudakov.o pt2maxreg.o sigborn.o gen_real_phsp.o maxrat.o	\
	gen_index.o gen_radiation.o Bornzerodamp.o sigremnants.o	\
	sigregular.o build_resonance_hists.o resize_arrays.o		\
	random.o boostrot.o bra_ket_subroutines.o cernroutines.o	\
	init_phys.o powheginput.o pdfcalls.o sigreal.o sigcollremn.o	\
	pwhg_analysis_driver.o checkmomzero.o		                \
	setstrongcoupl.o integrator.o mintwrapper.o newunit.o mwarn.o  	\
	sigsoftvirt.o reshufflemoms.o                                 	\
	sigcollsoft.o sigvirtual.o  ubprojections-new.o			\
	resweights.o locks.o genericphsp.o PhaseSpaceUtils.o boostrot4.o\
	setlocalscales.o mint_upb.o opencount.o fullrwgt.o          \
	lotopdecaywidth.o nloratiotopdecay.o Gamma0int.o Gamma0.o       \
        asGamma1int.o asGamma1.o pwhg_io_interface.o rwl_weightlists.o  \
        rwl_setup_param_weights.o rwl_setup_param_weights_user.o lhefread.o \
	validflav.o cache_similar.o utils.o  $(PDFPACK) $(USER) $(FPEOBJ)

LIBDIRMG=$(OBJ)
LINKMGLIBS =  -L$(LIBDIRMG)  -lmadgraph -lmodel -ldhelas3
# -lMadLoop -lcts -ldhelas -liregi -lMadLoop -lmodel5
# -lcts
MADLIBS=libdhelas3.a libmadgraph.a libmodel.a

# Get SVN info for SVN version stamping code
$(shell ../svnversion/svnversion.sh>/dev/null)

# target to generate LHEF output
pwhg_main:compile_openloops $(PWHG) $(MADLIBS)
	$(FF) $(patsubst %,$(OBJ)/%,$(PWHG)) $(LINKMGLIBS) $(LIBS) $(LIBSOPENLOOPS) $(LIBSFASTJET) $(STATIC) -o $@

LHEF=lhef_analysis.o boostrot4.o utils.o random.o cernroutines.o\
     opencount.o powheginput.o $(PWHGANAL)	\
     lhefread.o newunit.o pwhg_analysis_driver.o $(FPEOBJ)

# target to analyze LHEF output
lhef_analysis:$(LHEF)
	$(FF) $(patsubst %,$(OBJ)/%,$(LHEF)) $(LIBS) $(LIBSFASTJET) $(STATIC)  -o $@ 



# target to read event file, shower events with HERWIG + analysis
HERWIG=main-HERWIG.o setup-HERWIG-lhef.o herwig.o boostrot.o	\
	powheginput.o $(PWHGANAL) lhefread.o	\
	pdfdummies.o opencount.o $(FPEOBJ) 

main-HERWIG-lhef: $(HERWIG)
	$(FF) $(patsubst %,$(OBJ)/%,$(HERWIG))  $(LIBSFASTJET)  $(STATIC) -o $@

# target to read event file, shower events with PYTHIA + analysis
PYTHIA=main-PYTHIA.o setup-PYTHIA-lhef.o pythia.o boostrot.o powheginput.o \
	$(PWHGANAL) lhefread.o newunit.o 	\
	pwhg_analysis_driver.o random.o cernroutines.o opencount.o	\
	$(FPEOBJ)

main-PYTHIA-lhef: $(PYTHIA)
	$(FF) $(patsubst %,$(OBJ)/%,$(PYTHIA)) $(LIBS) $(LIBSFASTJET)  $(STATIC) -o $@



# target to read event file, shower events with PYTHIA8.1 + analysis
PYTHIA8=main-PYTHIA8.o boostrot.o powheginput.o \
	$(PWHGANAL) opencount.o lhefread.o newunit.o pdfdummies.o \
	random.o cernroutines.o bra_ket_subroutines.o boostrot4.o utils.o\
	$(FPEOBJ)

main-PYTHIA8-lhef: $(PYTHIA8) pythia81F77.o
	$(FF) $(patsubst %,$(OBJ)/%,$(PYTHIA8) pythia81F77.o ) $(LIBSFASTJET) $(LIBPYTHIA8) $(STATIC) $(LIBS) -o $@


# target to read event file, shower events with PYTHIA8.2 + analysis
main-PYTHIA82-lhef: $(PYTHIA8) pythia82F77.o
	$(FF) $(patsubst %,$(OBJ)/%,$(PYTHIA8) pythia82F77.o ) $(LIBSFASTJET) $(LIBPYTHIA8) $(STATIC) $(LIBS) -o $@





# build OpenLoops: calls scons
#ifdef OLPATH
#compile_openloops:
#	@echo "Compiling OpenLoops..." ; cd $(OLPATH) ;  ./compile ;  echo "...done."
#endif

# build OpenLoops core : calls scons
compile_openloops:
ifdef OLPATH
ifdef OLLIBS
	@if [ -d "$(OLPATH)" ]; then \
	echo "Compiling OpenLoops..." ; cd $(OLPATH) ; \
  ./scons generic_lib_dir=$(PWD)/$(OBJ)/ compile_libraries=cuttools,collier link_libraries=cuttools,collier \
  process_src_dir=$(PWD)/OL_process_src \
  process_obj_dir=$(PWD)/$(OBJ)/OL_process_obj \
  process_lib_dir=$(PWD)/$(OBJ)/proclib ; \
	./openloops libinstall $(OLLIBS) generator=0 compile_extra=1 fortran_compiler=$(COMPILER) \
	generic_lib_dir=$(PWD)/$(OBJ)/ compile_libraries=cuttools,collier link_libraries=cuttools,collier \
  process_src_dir=$(PWD)/OL_process_src \
  process_obj_dir=$(PWD)/$(OBJ)/OL_process_obj \
  process_lib_dir=$(PWD)/$(OBJ)/proclib ; \
  echo "...done."; \
	else \
	echo "ERROR: OpenLoops not available for POWHEG. Please download!" ;\
    exit 1; \
	fi
else
	@echo "ERROR compiling OpenLoops: OLLIBS not specified!" ;
endif
else
	@echo "ERROR compiling OpenLoops: OLPATH not specified!" ;
endif

# target to cleanup
.PHONY: clean libdhelas3.a libmadgraph.a libmodel.a

XFFLAGS=$(DEBUG) $(OPT)
libdhelas3.a:
	cd DHELAS ; make FC="$(F77)" F77="$(F77)" XFFLAGS="$(XFFLAGS)" OBJ="$(OBJ)"

libmadgraph.a:
	cd Madlib ; make FC="$(F77)" F77="$(F77)" XFFLAGS"=$(XFFLAGS)" OBJ="$(OBJ)"

ifeq ("$(COMPILER)","gfortran")
XFFLAGS +=-ffixed-line-length-132
else
XFFLAGS +=-extend-source
endif

libmodel.a:
	cd MODEL ; make FC="$(F77)" F77="$(F77)" XFFLAGS="$(XFFLAGS)" OBJ="$(OBJ)"

hackhistos:  hackhistos-multi.f ../pwhg_bookhist-multi-extra.f ../pwhg_bookhist-multi.f ../newunit.f
	gfortran -ffixed-line-length-none -I../include hackhistos-multi.f ../pwhg_bookhist-multi-extra.f \
               ../pwhg_bookhist-multi.f ../newunit.f -o  hackhistos

clean:
	rm -f $(patsubst %,$(OBJ)/%,$(USER) $(PWHG) $(LHEF) $(HERWIG) $(PYTHIA) $(PYTHIA8) pythia8?F77.o) \
        pwhg_main lhef_analysis main-HERWIG-lhef main-PYTHIA*-lhef


veryclean:
	rm -f $(OBJ)/*.o $(OBJ)/*.mod $(OBJ)/*.a $(OBJ)/*.so pwhg_main lhef_analysis main-HERWIG-lhef	\
	main-PYTHIA-lhef *.a DHELAS/*.o Madlib/*.o MODEL/*.o; \
  rm -rf OL_process_obj $(OBJ)/OL_process_obj $(OBJ)/proclib; \
  rm ../OpenLoopsStuff/OpenLoops/.sconsign.dblite; \
  cd $(OLPATH); ./scons -c clean=src


# target to generate object directory if it does not exist
$(OBJDIR):
	mkdir -p $(OBJDIR)

##########################################################################


# Dependencies of SVN version stamp code
pwhg_main.o: svn.version
lhefwrite.o: svn.version

